name: Build and Test Quality Gate
on:
  workflow_call:
    secrets:
      SSH_JUMP_HOST_USER:
        required: true
      SSH_JUMP_HOST_KEY:
        required: true
      SSH_JUMP_HOST_IP:
        required: true
      GCR_CREDENTIALS:
        required: true
    inputs:
      branchesToPublishArtifacts:
        description: 'Branches To Publish Artifacts'
        required: false
        default: '["dev", "qa", "test", "uat", "main", "master"]'
        type: string

jobs:
  build-and-test:
    name: Build and Test Quality Gate Job
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name and commit hash
        shell: bash
        run: |
          echo "SHORT_SHA=`echo ${{ github.event.pull_request.head.sha }} | cut -c1-8`" >> $GITHUB_ENV
          echo "##[set-output name=short_sha;]$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-8)"
          echo "##[set-output name=branch_name;]$(echo ${GITHUB_HEAD_REF#refs/heads/})"
        id: extract_git_branch_info

      - run: echo "🎉 The job was automatically triggered for the commit ${{ steps.extract_git_branch_info.outputs.short_sha }} in branch ${{ steps.extract_git_branch_info.outputs.branch_name }} by a ${{ github.event_name }} event."

      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Configure SSH
        run: |
          pwd
          mkdir -p /home/runner/.ssh/
          echo "$SSH_KEY" > /home/runner/.ssh/nexus.key
          chmod 600 /home/runner/.ssh/nexus.key
          cat >>/home/runner/.ssh/config <<END
          Host nexus
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile /home/runner/.ssh/nexus.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_JUMP_HOST_USER }}
          SSH_KEY: ${{ secrets.SSH_JUMP_HOST_KEY }}
          SSH_HOST: ${{ secrets.SSH_JUMP_HOST_IP }}

      - name: Execute ssh port forward
        run: |
          sudo echo "127.0.0.1 nexus.rez1.com nexus" | sudo tee -a /etc/hosts
          sudo ssh -4 -fN -F /home/runner/.ssh/config -L0.0.0.0:443:nexus.rez1.com:443 nexus

      - name: Configure GCR
        run: |
          mkdir -p $HOME/.gcr/
          echo "$GCR_CREDENTIALS" > $HOME/.gcr/gcr_sa_key.json
          chmod 600 $HOME/.gcr/gcr_sa_key.json
          cat $HOME/.gcr/gcr_sa_key.json
        env:
          GCR_CREDENTIALS: ${{ secrets.GCR_CREDENTIALS }}

      - name: docker compose up
        run: docker-compose up -d
      #      - name: netstat
      #        run: |
      #          netstat -a -n | grep 8089

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean build

      #      - name: Publish Unit Test Results
      #        uses: EnricoMi/publish-unit-test-result-action@v1
      #        if: always()
      #        with:
      #          files: "**/build/test-results/test/*.xml"

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      - run: echo "JAR publishing configured for branches - ${{ inputs.branchesToPublishArtifacts }}"

      - name: Publish JAR Artifacts
        uses: gradle/gradle-build-action@v2
        if: contains(fromJSON(inputs.branchesToPublishArtifacts), steps.extract_git_branch_info.outputs.branch_name)
        with:
          arguments: publish

      - name: Configure Docker Image
        id: 'docker-image-config'
        run: |
          echo '::set-output name=image_name::${{ steps.extract_git_branch_info.outputs.branch_name }}"-"${SHORT_SHA}'
          echo "The docker image name is ${{ steps.docker-image-config.outputs.image_name }}"

      - name: Publish Image to GCR
        run: ./gradlew publishDockerImage -PimageName="${{ steps.docker-image-config.outputs.image_name }}"

      #      - name: Test Report
      #        uses: dorny/test-reporter@v1
      #        if: success() || failure()    # run this step even if previous step failed
      #        with:
      #          name: JUnit Tests            # Name of the check run which will be created
      #          path: "**/build/test-results/test/*.xml"    # Path to test results
      #          reporter: jest-junit        # Format of test results

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."

      #- name: Count Commits
      #  run: |
      #    git rev-list HEAD ^origin/${{github.base_ref }}
      #    echo "REV_LIST_COUNT=$(git rev-list --count HEAD ^origin/${{github.base_ref }})" >> $GITHUB_ENV

      #- name: Fail if more than one commit
      #  if: env.REV_LIST_COUNT > 2
      #  run: |
      #    echo "This PR has more than one commit"
      #    echo "Squash your commits before pushing"
      #    echo "  git rebase -i origin/${{github.base_ref }} "
      #    echo "  git push --force "
      #    exit -1
