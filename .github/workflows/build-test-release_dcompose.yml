name: Build and Test Quality Gate
on:
  workflow_call:
    secrets:
      SSH_JUMP_HOST_USER:
        required: true
      SSH_JUMP_HOST_KEY:
        required: true
      SSH_JUMP_HOST_IP:
        required: true
      GCR_CREDENTIALS:
        required: true
      NEXUS_USERNAME:
        required: false
      NEXUS_PASSWORD:
        required: false
      JIRA_API_TOKEN:
        required: true
    inputs:
      branchesToPublishArtifacts:
        description: 'Branches To Publish Artifacts'
        required: false
        default: '["dev", "qa", "test", "uat", "main", "master"]'
        type: string
      branchesToPublishImages:
        description: 'Branches To Publish Docker Images to GCR'
        required: false
        default: '["dev", "qa", "test", "uat", "main", "master"]'
        type: string
      branchesToDeploy:
        description: 'Branches To Deploy'
        required: false
        default: '["dev-env"]'
        type: string
permissions: write-all
jobs:
  build-and-test:
    name: Build and Test Quality Gate Job
    runs-on: ubuntu-latest
    env:
      ORG_GRADLE_PROJECT_nexusUsername: ${{ secrets.NEXUS_USERNAME }}
      ORG_GRADLE_PROJECT_nexusPassword: ${{ secrets.NEXUS_PASSWORD }}
      CI: false
    steps:
      - name: Remove unnecessary files
        run: |
          sudo rm -rf /usr/share/dotnet
      - name: Extract branch name and commit hash
        shell: bash
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo "##[set-output name=short_sha;]$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-8)"
            echo "##[set-output name=branch_name;]$(echo ${GITHUB_HEAD_REF#refs/heads/})"
          else
            echo "##[set-output name=short_sha;]$(echo ${{ github.sha }} | cut -c1-8)"
            echo "##[set-output name=branch_name;]$(echo ${GITHUB_REF#refs/heads/})"
          fi          
        id: extract_git_branch_info

      - run: echo "ðŸŽ‰ The job was automatically triggered for the commit ${{ steps.extract_git_branch_info.outputs.short_sha }} in branch ${{ steps.extract_git_branch_info.outputs.branch_name }} by a ${{ github.event_name }} event."
      
      - name: Dump GitHub context
        id: github_context_step
        run: echo $JSON
        env:
          JSON: ${{ toJSON(github) }}
          
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

# JIRA ID Validation for PRs against releases branch ---- start
#      - name : Get Jira ID from Title of PR
#        if: github.event_name == 'pull_request' && startsWith( github.base_ref, 'releases')
#        run: |
#            echo Extracting Jira Id from PR Title: '${{ github.event.pull_request.title }}'
#            echo IMPORTANT!!! PR Titile should have Jira Id enclosed in square brackets like [AR-419] and not have any special characters in it
#            echo '${{ github.event.pull_request.title }}' | sed -n 's/.*\[\(.*\)\].*/\1/p'
#            echo "::set-output name=jira_id::$(echo '${{ github.event.pull_request.title }}' | sed -n 's/.*\[\(.*\)\].*/\1/p')"
#            echo "::set-output name=release::$(echo ${{ github.base_ref }} | sed -n 's/releases\/\(.*\)/\1/p')"
#            echo '${{ github.event.pull_request.title }}' | grep -e '\[\(.*\)\]'
#        id: extract_jira_id 
#      
#      - name : Validate Jira ID
#        if: github.event_name == 'pull_request' && startsWith( github.base_ref, 'releases')
#        env:
#          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
#        run: |
#          echo 'There should be a valid issue on Jira for the id ${{ steps.extract_jira_id.outputs.jira_id }}'
#          curl -s --request GET \
#          --url "https://rezone.atlassian.net/rest/api/2/issue/${{ steps.extract_jira_id.outputs.jira_id }}?fields=summary" \
#          --header "Authorization: Basic $JIRA_API_TOKEN" \
#          -w '\nstatus%{http_code}\n' | grep status200
#        
#        id: validate_jira_id
#
#      - name : Validate if Jira ID belongs to a release
#        if: 1 == 2 && github.event_name == 'pull_request' && startsWith( github.base_ref, 'releases')
#        env:
#          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
#        run: |
#          echo '${{ steps.extract_jira_id.outputs.jira_id }} should belong to the ${{ github.base_ref }}'
#          curl -s --request GET \
#          --url "https://rezone.atlassian.net/rest/api/2/issue/${{ steps.extract_jira_id.outputs.jira_id }}?fields=customfield_12803" \
#          --header "Authorization: Basic $JIRA_API_TOKEN" \
#          | sed -n 's/.*fields.*{\(.*\)}.*/\1/p' | grep -i '${{ steps.extract_jira_id.outputs.release }}'
#  
# JIRA ID Validation for PRs against releases branch - end

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Configure SSH
        run: |
          pwd
          mkdir -p /home/runner/.ssh/
          echo "$SSH_KEY" > /home/runner/.ssh/nexus.key
          chmod 600 /home/runner/.ssh/nexus.key
          cat >>/home/runner/.ssh/config <<END
          Host nexus
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile /home/runner/.ssh/nexus.key
            StrictHostKeyChecking no
            ServerAliveInterval 60
            ServerAliveCountMax 30
          END
        env:
          SSH_USER: ${{ secrets.SSH_JUMP_HOST_USER }}
          SSH_KEY: ${{ secrets.SSH_JUMP_HOST_KEY }}
          SSH_HOST: ${{ secrets.SSH_JUMP_HOST_IP }}

      - name: Execute ssh port forward
        run: |
          sudo echo "127.0.0.1 nexus.rez1.com nexus kubernetes data-blume-devdb-5.rez1.com" | sudo tee -a /etc/hosts
          sudo ssh -4 -fN -F /home/runner/.ssh/config -L0.0.0.0:443:nexus.rez1.com:443 nexus
      - name: Configure GCR
        run: |
          mkdir -p $HOME/.gcr/
          echo "$GCR_CREDENTIALS" > $HOME/.gcr/gcr_sa_key.json
          chmod 600 $HOME/.gcr/gcr_sa_key.json
          cat $HOME/.gcr/gcr_sa_key.json
        env:
          GCR_CREDENTIALS: ${{ secrets.GCR_CREDENTIALS }}


      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        env:
          NODE_OPTIONS: "--max_old_space_size=8192"
        with:
          arguments: clean build --refresh-dependencies -PbranchName=${{ steps.extract_git_branch_info.outputs.branch_name }} -PbaseRef=${{ github.base_ref }}

      - name: Should Publish JARs
        continue-on-error: true
        run: ./gradlew tasks --all | grep -w "publish"
        id: publish_jar
       
      - name: Publish JAR branches   
        if: steps.publish_jar.outcome == 'success'
        run: echo "JAR publishing configured for branches - ${{ inputs.branchesToPublishArtifacts }}"

      - name: Test Dir
        run: |
          pwd
          ls -ltr
          ls -ltr ./APP.DATAWAREHOUSE.ETL/build/libs
          echo "$SSH_KEY" > tmp.txt
          echo "$SSH_USER"
          echo "$SSH_HOST"
          cat tmp.txt
        env:
          SSH_USER: ${{ secrets.SSH_JUMP_HOST_USER }}
          SSH_KEY: ${{ secrets.SSH_JUMP_HOST_KEY }}
          SSH_HOST: ${{ secrets.SSH_JUMP_HOST_IP }}
        
      - name: Publish JAR Artifacts
        uses: gradle/gradle-build-action@v2
        if: steps.publish_jar.outcome == 'success' && ( contains(fromJSON(inputs.branchesToPublishArtifacts), steps.extract_git_branch_info.outputs.branch_name) || startsWith(steps.extract_git_branch_info.outputs.branch_name, 'releases') || startsWith(github.ref, 'refs/tags/v') )
        with:
          arguments: publish  -Pgithubref=${{github.ref}} -PbranchName=${{ steps.extract_git_branch_info.outputs.branch_name }}

      
